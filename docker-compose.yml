# Depends_on Control Services Startup Order
# Don't Forget Set Environment Variables Before Run This yml file
# APP_ENV=development || production
# windows >> set APP_ENV=development
version: '3'

services:
  nginx:
    container_name: nginx
    build:
      context: .
      dockerfile: ./docker/nginx.${APP_ENV}.dockerfile
    depends_on:
      - product
    ports:
      - '80:80'
      - '443:443'
    networks:
      - node-boilerplate-network

  auth:
    container_name: Auth-Service
    build:
      context: .
      dockerfile: ./docker/auth.node.${APP_ENV}.dockerfile
    ports:
      - '3000:3000'
    volumes:
      - .:/var/www/boilerplate
    depends_on:
      - auth-db
    networks:
      node-boilerplate-network:
        ipv4_address: 172.28.0.12
        aliases:
          - auth.local
  auth-db:
    container_name: auth-db
    build:
      context: .
      dockerfile: docker/mongo.dockerfile
    ports:
      - '27017:27017'
    env_file:
      - ./docker/env/mongo.${APP_ENV}.env
    networks:
      node-boilerplate-network:
        ipv4_address: 172.28.0.13
        aliases:
          - auth-db.local

  product:
    container_name: Product-Service
    build:
      context: .
      dockerfile: ./docker/product.node.${APP_ENV}.dockerfile
    ports:
      - '8000:8000'
    volumes:
      - .:/var/www/boilerplate
    env_file:
      - ./docker/env/app.${APP_ENV}.env
    depends_on:
      - productdb
    #   - kafka
    networks:
      node-boilerplate-network:
        ipv4_address: 172.28.0.10
        aliases:
          - product.local

  # zookeeper:
  #   container_name: Zookeeper-Service
  #   image: wurstmeister/zookeeper
  #   ports:
  #     - '2181:2181'
  #   networks:
  #     - node-boilerplate-network

  # kafka:
  #   container_name: Kafka-Service
  #   build:
  #     context: .
  #     dockerfile: ./docker/kafka.${APP_ENV}.dockerfile
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - '9092:9092'
  #   env_file:
  #     - ./docker/env/kafka.${APP_ENV}.env
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   networks:
  #     - node-boilerplate-network

  productdb:
    container_name: productdb
    restart: always
    image: mysql:latest
    volumes:
      - 'mysql:/var/lib/mysql'
      - './config/mysql/sql.cnf:/etc/mysql/conf.d/sql.cnf'
    ports:
      - '3366:3306'
    env_file:
      - ./docker/env/productdb.${APP_ENV}.env
    networks:
      node-boilerplate-network:
        ipv4_address: 172.28.0.11
        aliases:
          - productdb.local

volumes:
  pgdata:
  mysql:

networks:
  node-boilerplate-network:
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
